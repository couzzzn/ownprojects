CSS позволяет выровнять текст, используя свойство text-align с 4 основными значениями:

left — по левому краю. Используется по умолчанию
center — по центру
right — по правому краю
justify — по ширине



Для того, чтобы указать шрифт, используется правило font-family, позволяющее выбрать один или несколько шрифтов, которые будут использоваться в документе.

<style>
  .new-font {
    font-family: Arial, Futura;
  }
</style>

<p class="new-font">Абзац</p>
Шрифты подключаются из тех, которые установлены в вашей системе. По этой причине стоит выбирать «распространённые шрифты», так как у другого пользователя их может не быть. Помимо этого возможно подключать шрифты со сторонних сервисов, таких как Google Fonts, или загружать их непосредственно на ваш сервер, на котором расположен сайт.

Наиболее распространёнными шрифтами являются:

Times New Roman
Arial
Tahoma
Verdana
Courier New

При подключении стилей хорошей практикой является добавление универсального семейства шрифта в правило font-family. Таких семейств на данный момент 5:

serif — шрифты с засечками (антиквы). Ярким представителем таких шрифтов является Times New Roman
sans-serif — шрифты без засечек (гротеск). Наиболее знакомыми такими шрифтами являются Arial и Verdana
cursive — курсивные шрифты
fantasy — декоративные шрифты. Это семейство используется реже всего. Дело в том, что декоративные шрифты слишком разные, чтобы они были взаимозаменяемые
monospace — моноширинные шрифты. К ним относятся шрифты, в которых все символы имеют одинаковую ширину. Очень часто их используют программисты в текстовых редакторах
Добавив универсальное семейство шрифта в правило font-family, мы страхуем себя от того, что у пользователя не окажется такого шрифта, который мы указали. Браузер автоматически выберет замену отсутствующему шрифту из универсального семейства шрифтов, которое было указано.




Удобным способом задать свойства для шрифта является использование правила font, которое позволяет указать:

font-style
font-variant
font-weight
font-size / line-height (эти два правила записываются через слэш)
font-family
Шесть разных правил внутри одного! Это помогает сократить CSS код и улучшить его читабельность. Обязательными из них являются font-size и font-family. Остальные можно не указывать.

Пример записи со всеми возможными правилами: font: italic small-caps bold 24px/1.2 Arial;

Предположим, что нам нужен жирный курсив с размером шрифта 24 пикселя из семейства шрифтов Arial, тогда правило в CSS будет выглядеть следующим образом:

.text {
  font: italic bold 24px Arial;
}
Жирный курсив с размером шрифта 24 пикселя из семейства Arial
Обратите внимание на порядок использования значений внутри свойства font. Вначале идут стилистические правила, затем размер шрифта и его межстрочный интервал и потом семейство шрифта. Это важно, так как при другом порядке браузер может некорректно обработать результат.

При указании свойства font-family также рекомендуется указать универсальное семейство шрифтов. Это необходимо для того, чтобы при отсутствии шрифта у пользователя был выбран подходящий из установленных в его системе. Как и при указании одиночного свойства font-family, все шрифты должны быть отделены запятыми. Это же касается и семейства шрифта.







Для создания границы у элемента используется свойство border, которое является сокращением от нескольких свойств:

border-width — ширина границы
border-style — стиль границы
border-color — цвет границы
Можно указывать несколько свойств, а можно всё объединить в рамках свойства border. Такой вариант встречается чаще всего и выглядит он так:

.element {
  border: 1px solid #ccc;
}
где:

1px — ширина границы
solid — стиль границы
#ccc — цвет границы
Со значениями в пикселях и hex-цветом мы уже сталкивались в рамках курса, а вот стилей границ в CSS восемь:

dotted
dashed
solid
double
groove
ridge
inset
outset
и есть значение none, которое «удалит» границу, так как при значении border-style: none браузеры игнорируют другие свойства и удаляют границу






Для создания внутренних отступов используется 4 правила:

padding-top — внутренний отступ сверху
padding-right — внутренний отступ справа
padding-bottom — внутренний отступ снизу
padding-left — внутренний отступ слева
Каждое свойство принимает числовое значение и единицу измерения, например пиксели

<div class="card">Карточка с белым текстом на фиолетовом фоне</div>
.card {
  padding-top: 10px;
  padding-bottom: 10px;
  padding-left: 20px;







Чтобы отделить две карточки из примера выше используются внешние отступы. Их принцип работы схож с внутренними отступами, а меняется только направление. В плане свойств и их значений всё то же самое. Существует 4 правила и одно общее:

margin-top — внешний отступ сверху
margin-right — внешний отступ справа
margin-bottom — внешний отступ снизу
margin-left — внешний отступ слева
Для объединения значений используют свойство margin, в котором сохраняется порядок указания:

отступ сверху
отступ справа
отступ снизу
отступ слева
Также, как у внутренних отступов, для удобства существуют сокращённые записи этих правил:

Если указать только одно значение, то оно будет использовано одновременно для всех сторон
Если указать два значения, то первое будет использоваться для отступов по вертикали (сверху и снизу), а второе по горизонтали (справа и слева)
Если указать три значения, то они будут использоваться для отступа сверху, по горизонтали и снизу






Одним из способов решения такой задачи является использование модуля Flex из CSS. Для этого достаточно указать свойство display со значением flex у общего блока, внутри которого находятся блоки с практикой и теорией.

<style>
.container {
  display: flex;
}
</style>

<div class="container">
  <div class="theory">Тут теория</div>
  <div class="practice">Тут редактор с практикой</div>
</div>

В текущей верстке блок с классом container называется Flex-контейнер, а элементы с классами theory и practice будут называться Flex-элементами. Важно, что flex-элементы это только те элементы, которые лежат непосредственно внутри контейнера.





