Основными типографическими мнемониками в HTML являются:

&nbsp; — неразрывный пробел. Очень важная вещь, которая позволяет не переносить строку с пробелом там, где это может испортить логическую структуру текста
&laquo; и &raquo; — традиционные «кавычки-ёлочки». Повсеместно используются в типографике
&mdash; — длинное тире
Мнемоники распространены, когда необходимо вставить теги без их обработки браузером. В таком случае можно воспользоваться мнемониками &lt; и &gt;, которые нужны для обозначения < и > соответственно: &lt;p&gt; такая разметка не будет обработана как параграф &lt;/p&gt;

Картинки на странице не существуют сами по себе. Предварительно они должны быть загружены в директорию на сервере или на специальный хостинг картинок. Для вставки картинки на страницу используется непарный тег <img>, у которого два обязательных атрибута: src и alt.

Ключевые слова
В разработке для страниц часто указывают ключевые слова. Они помогают роботам корректнее собирать информацию о странице, что хорошо сказывается на продвижении сайта в интернете. Как и с описанием, для установки ключевых слов используется два атрибута. В качестве значения атрибута name используется keywords. Сами ключевые слова перечисляются через запятую

<meta name="keywords" content="программирование, курсы, HTML, CSS">

Сейчас такая проблема решается указанием ширины сайта для устройств. Наиболее часто используют значение device-width у параметра width, которое устанавливает ширину страницы, равную ширине экрана устройства.

<head>
  <meta name="viewport" content="width=device-width">
</head>

Основные параметры метатега viewport
width — ширина сайта. Указывается в пикселях. Возможно использование значения device-width для установки ширины страницы равной ширине устройства.
height — высота сайта. Указывается в пикселях. Возможно использование значения device-height для установки высоты страницы равной высоте устройства.
initial-scale — начальный коэффициент масштабирования. Может принимать значение от 0.1 до 10.0. Значение единица масштабирует страницу по умолчанию.
user-scalable — указывает, может ли пользователь масштабировать страницу, то есть приближать или отдалять её. Принимает значение yes и no
Укажем viewport со следующими характеристиками:
Ширина: 980px
Масштаб: 1
Запрет управления масштабированием. То есть запретить приближать или отдалять контент с помощью жестов или «горячих клавиш»
Для этого создаём метатег и, вначале указываем ширину. Это делается с помощью значения width:
<meta name="viewport" content="width=980">
Задать изначальный масштаб поможет значение initial-scale со значением 1.0. Оно означает, что страница выведется без какого-либо искажения, с теми размерами шрифтов и других элементов, которые были установлены разработчиками.
<meta name="viewport" content="width=980, initial-scale=1.0">
Последнее — запрет на масштабирование. Для этого добавим user-scalable со значением no
<meta name="viewport" content="width=980, initial-scale=1.0, user-scalable=no">
Базовое использование метатега viewport
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<div></div>
<span></span>
<p)</p>
При этом стоит отметить, что элементы div и p являются блочными, элемент div может содержать любые другие элементы, а элемент p - только строчные элементы. В отличие от них элемент span является строчным, то есть как бы встраивает свое содержимое во внешний контейнер - тот же div или параграф. Но при этом не следует помещать блочные элементы в строчный элемент span.



Основными семантическими тегами стали:

<article> не привязана структурно к конкретной странице + заголовок(нп курс валют), Если область не потеряет свой смысл вне страницы, то её можно обернуть в <article>
<aside> сайдбар. Он служит для отображения информации, которая дополняет основной текст, но не является обязательной., внутри aside которого и располагается наша боковая панель. 
<footer>низ
<header>верх
<main>середина
<nav>-меню
<section>-отдельная секция в мэин


Элемент main является уникальным для одной страницы. Это отражает его семантическое назначение — разметка уникального контента. При оборачивании контента в main важно не включать в него неуникальные области:

Боковое меню
Общую навигацию для сайта
Общую шапку и футер сайта
Логотип
Размещайте в main именно текстовый/графический контент. Найти такой контент в шаблонах легко — он не дублируется на других страницах.

Внутри элемента main могут находиться свои области навигации, шапки, секции и другие элементы, которые будут изучены в этом модуле.

Внутри main секции с формой, дополнительной информацией и так далее. Они могут быть выделены с помощью тега <section>, значение которого — разметка связанных, по смыслу, блоков внутри секции.




Пример семантической разметки на HTML5
<main> <!-- Определение основной части страницы -->
  <article> <!-- Определение статьи -->
    <header> <!-- Заголовочная информация статьи -->
      <h1>Название статьи</h1>
      <img src="article.png" alt="Заголовок статьи">
    </header>

    <p>Текст нашей статьи</p>

    <footer> <!-- «Подвал статьи» с указанием автора и даты -->
      <address> <!-- Информация об авторе статьи -->
        <p>Автор: Дмитрий</p>
        <p>Email: dmitry@test.test</p>
      </address>
      <time datetime="2019-07-27">27 июля</time> <!-- Дата написания статьи -->
    </footer>
  </article>
</main>


микроразметка

Schema.org
https://yandex.ru/support/webmaster/schema-org/intro-schema-org.html

Первое, нужно выбрать словарь. Поисковая система Яндекс для этого предлагает несколько вариантов. Возьмём словарь Organization. Полное описание этого словаря можно найти на сайте https://schema.org/.

В уроке не ставится цель научить полностью размечать данные. Цель урока — показать пример микроразметки

Для того чтобы подсказать поисковой системе, что данные размечены словарём, указывается два атрибута:

itemscope — указатель на то, что блок — единая сущность, и данные в нем связаны. Указывается только у главного блока и не имеет своего значения
itemtype — указывает на то, какой словарь будет использоваться. Например, для описания контактов выбран словарь Organization. Полный вид атрибута: itemtype="http://schema.org/Organization"
<section itemscope itemtype="http://schema.org/Organization">
  <h1>Компания «Прауд»</h1>
  <p>Адрес: г.Мотино, улица Строителей, дом 6</p>
  <p>Телефон: 8 (8765) 333-00-00</p>
  <p>Email: info@proud-company.test</p>
</section>
Теперь поисковая система будет знать, что внутри этого блока информация об организации. Приступим к разметке адреса. Schema.org позволяет отдельно указывать улицу, дом, строение и так далее, но мы обобщим это и используем только одно значение itemprop="address", чтобы обозначить адрес предприятия. Обратите внимание, что элементы разметки указываются с помощью атрибута itemprop.

<section itemscope itemtype="http://schema.org/Organization">
  <h1>Компания «Прауд»</h1>
  <p>Адрес: <span itemprop="address">г.Мотино, улица Строителей, дом 6</span></p>
  <p>Телефон: 8 (8765) 333-00-00</p>
  <p>Email: info@proud-company.test</p>
</section>
По аналогии с адресом разметим остальные данные: название, телефон, email. Для каждого из них есть своё значение атрибута itemprop. Обратите внимание, что размечаются только данные, оставляя за «бортом» название поля. Для этого нужные данные оборачивают в <span> и для него указывают атрибут.

<section itemscope itemtype="http://schema.org/Organization">
  <h1 itemprop="name">Компания «Прауд»</h1>
  <p>Адрес: <span itemprop="address">г.Мотино, улица Строителей, дом 6</span></p>
  <p>Телефон: <span itemprop="telephone">8 (8765) 333-00-00</span></p>
  <p>Email: <span itemprop="email">info@proud-company.test</span></p>
</section>
Для проверки корректности микроразметки можно пользоваться инструментами популярных поисковых систем:

Google
Yandex
Попробуйте вставить тестовый пример в эти инструменты и взгляните на результат. Можете попробовать «сломать» микроразметку и посмотреть на вывод ошибок.

